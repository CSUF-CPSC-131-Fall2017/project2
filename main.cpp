//
#include <iostream>
#include <fstream>
#include <list>
#include <string>
#include <stdexcept>

#include "Webpage.h"
#include "BrowserHistory.h"

using namespace std;

////////////////////////////////////////////////////////////////////////////////
// DO NOT EDIT THIS FILE (except for your own testing)
// CODE WILL BE GRADED USING A MAIN FUNCTION SIMILAR TO THIS
////////////////////////////////////////////////////////////////////////////////

template <typename T>
bool testAnswer(const string &nameOfTest, const T& received, const T& expected) {
    if (received == expected) {
        cout << "PASSED " << nameOfTest << ": expected and received " << received << endl;
        return true;
    }
    cout << "FAILED " << nameOfTest << ": expected " << expected << " but received " << received << endl;
    return false;
}

template <typename T>
bool testArrays(const string& nameOfTest, const T& received, const T& expected, const int& size) {
    for(int i = 0; i < size; i++) {
        if(received[i] != expected[i]) {
            cout << "FAILED " << nameOfTest << ": expected " << expected << " but received " << received << endl;
            return false;
        }
    }

    cout << "PASSED " << nameOfTest << ": expected and received matching arrays" << endl;
    return true;
}

int main() {
    // Test only Webpage class
    Webpage testPage01("http://www.google.com", 1506134400);
    testAnswer("Webpage01.getURL() test", testPage01.getURL(), string("http://www.google.com"));
    testAnswer("Webpage01.getTime() test", testPage01.getTime(), time_t(1506134400));

    Webpage testPage02("http://twitter.com", 1506134420);
    testAnswer("Webpage02.getURL() test", testPage02.getURL(), string("http://twitter.com"));
    testAnswer("Webpage02.getTime() test", testPage02.getTime(), time_t(1506134420));

    Webpage testPage03("http://stackoverflow.com", 1506134440);
    testAnswer("Webpage03.getURL() test", testPage03.getURL(), string("http://stackoverflow.com"));
    testAnswer("Webpage03.getTime() test", testPage03.getTime(), time_t(1506134440));

    // Test BrowserHistory class
    BrowserHistory testHistory;
    testHistory.visitSite(testPage01);
    testAnswer("BrowserHistory.getNavSize()", testHistory.getNavSize(), size_t(1));
    testAnswer("BrowserHistory.getURL()", testHistory.getURL(), string("http://www.google.com"));

    testHistory.visitSite(testPage02);
    testAnswer("BrowserHistory.getNavSize()", testHistory.getNavSize(), size_t(2));
    testAnswer("BrowserHistory.getURL()", testHistory.getURL(), string("http://twitter.com"));

    // Test BrowserHistory navigation
    testAnswer("BrowserHistory.back()", testHistory.back(), string("http://www.google.com"));
    testAnswer("BrowserHistory.getURL()", testHistory.getURL(), string("http://www.google.com"));
    testAnswer("BrowserHistory.forward()", testHistory.forward(), string("http://twitter.com"));
    testHistory.back();
    testHistory.visitSite(testPage03);
    testAnswer("BrowserHistory.getNavSize()", testHistory.getNavSize(), size_t(2));
    testAnswer("BrowserHistory.getURL()", testHistory.getURL(), string("http://stackoverflow.com"));


    // Test BrowserHistory reading from a file
    BrowserHistory desktop;
    desktop.readHistory("desktop.txt");
    testAnswer("BrowserHistory.getNavSize()", desktop.getNavSize(), size_t(3));
    testAnswer("BrowserHistory.getURL()", desktop.getURL(),
                string("https://en.wikipedia.org/wiki/International_Space_Station"));

    desktop.readHistory("mobile.txt");
    testAnswer("BrowserHistory.getNavSize()", desktop.getNavSize(), size_t(7));
    testAnswer("BrowserHistory.getURL()", desktop.getURL(), string("http://www.binomial.info/"));

    // Test Back and Forward Again
    testAnswer("BrowserHistory.back() 02", desktop.back(), string("https://twitter.com/sehulrburt"));
    desktop.forward();
    testAnswer("BrowserHistory.forward() 02", desktop.forward(), string("https://sites.google.com/site/richgel99/"));
    desktop.back();

    // Test BrowserHistory full history
    cout << "\nPrinting Back Sites:\n";
    desktop.printBackSites();
    cout << "\nPrinting Forward Sites:\n";
    desktop.printForwardSites();
    cout << "\nPrinting Full History:\n";
    desktop.printFullHistory();

    return 0;
}
